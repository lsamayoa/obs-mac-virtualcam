/*
 * IDENTIFICATION:
 * stub generated Fri Mar 27 16:07:39 2020
 * with a MiG generated by bootstrap_cmds-116
 * OPTIONS: 
 */

/* Module SampleAssistant */

#define	__MIG_check__Request__SampleAssistant_subsystem__ 1

#include "CMIODPASampleServer.h"

#ifndef	mig_internal
#define	mig_internal	static __inline__
#endif	/* mig_internal */

#ifndef	mig_external
#define mig_external
#endif	/* mig_external */

#if	!defined(__MigTypeCheck) && defined(TypeCheck)
#define	__MigTypeCheck		TypeCheck	/* Legacy setting */
#endif	/* !defined(__MigTypeCheck) */

#if	!defined(__MigKernelSpecificCode) && defined(_MIG_KERNEL_SPECIFIC_CODE_)
#define	__MigKernelSpecificCode	_MIG_KERNEL_SPECIFIC_CODE_	/* Legacy setting */
#endif	/* !defined(__MigKernelSpecificCode) */

#ifndef	LimitCheck
#define	LimitCheck 0
#endif	/* LimitCheck */

#ifndef	min
#define	min(a,b)  ( ((a) < (b))? (a): (b) )
#endif	/* min */

#if !defined(_WALIGN_)
#define _WALIGN_(x) (((x) + 3) & ~3)
#endif /* !defined(_WALIGN_) */

#if !defined(_WALIGNSZ_)
#define _WALIGNSZ_(x) _WALIGN_(sizeof(x))
#endif /* !defined(_WALIGNSZ_) */

#ifndef	UseStaticTemplates
#define	UseStaticTemplates	0
#endif	/* UseStaticTemplates */

#ifndef MIG_SERVER_ROUTINE
#define MIG_SERVER_ROUTINE
#endif

#ifndef	__DeclareRcvRpc
#define	__DeclareRcvRpc(_NUM_, _NAME_)
#endif	/* __DeclareRcvRpc */

#ifndef	__BeforeRcvRpc
#define	__BeforeRcvRpc(_NUM_, _NAME_)
#endif	/* __BeforeRcvRpc */

#ifndef	__AfterRcvRpc
#define	__AfterRcvRpc(_NUM_, _NAME_)
#endif	/* __AfterRcvRpc */

#ifndef	__DeclareRcvSimple
#define	__DeclareRcvSimple(_NUM_, _NAME_)
#endif	/* __DeclareRcvSimple */

#ifndef	__BeforeRcvSimple
#define	__BeforeRcvSimple(_NUM_, _NAME_)
#endif	/* __BeforeRcvSimple */

#ifndef	__AfterRcvSimple
#define	__AfterRcvSimple(_NUM_, _NAME_)
#endif	/* __AfterRcvSimple */

#define novalue void

#define msgh_request_port	msgh_local_port
#define MACH_MSGH_BITS_REQUEST(bits)	MACH_MSGH_BITS_LOCAL(bits)
#define msgh_reply_port		msgh_remote_port
#define MACH_MSGH_BITS_REPLY(bits)	MACH_MSGH_BITS_REMOTE(bits)

#define MIG_RETURN_ERROR(X, code)	{\
				((mig_reply_error_t *)X)->RetCode = code;\
				((mig_reply_error_t *)X)->NDR = NDR_record;\
				return;\
				}

/* Forward Declarations */


mig_internal novalue _XSampleConnect
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleDisconnect
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleGetDeviceStates
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleGetProperties
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleSetPropertyState
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleGetPropertyState
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleGetControls
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleSetControl
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleProcessRS422Command
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleStartStream
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleStopStream
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleGetControlList
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleStartDeckThreads
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleStopDeckThreads
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleDeckPlay
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleDeckStop
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleDeckJog
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);

mig_internal novalue _XSampleDeckCueTo
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);


#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleConnect_t__defined)
#define __MIG_check__Request__SampleConnect_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleConnect_t(__attribute__((__unused__)) __Request__SampleConnect_t *In0P)
{

	typedef __Request__SampleConnect_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleConnect_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleConnect */
mig_internal novalue _XSampleConnect
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		pid_t client;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleConnect_t __Request;
	typedef __Reply__SampleConnect_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleConnect_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleConnect_t__defined */

#if	UseStaticTemplates
	const static mach_msg_port_descriptor_t clientSendPortTemplate = {
		/* name = */		MACH_PORT_NULL,
		/* pad1 = */		0,
		/* pad2 = */		0,
		/* disp = */		20,
		/* type = */		MACH_MSG_PORT_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1984, "SampleConnect")
	__BeforeRcvRpc(1984, "SampleConnect")

#if	defined(__MIG_check__Request__SampleConnect_t__defined)
	check_result = __MIG_check__Request__SampleConnect_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleConnect_t__defined) */

#if	UseStaticTemplates
	OutP->clientSendPort = clientSendPortTemplate;
#else	/* UseStaticTemplates */
	OutP->clientSendPort.disposition = 20;
#if !(defined(KERNEL) && defined(__LP64__))
	OutP->clientSendPort.pad1 = 0;
#endif
	OutP->clientSendPort.pad2 = 0;
	OutP->clientSendPort.type = MACH_MSG_PORT_DESCRIPTOR;
#if defined(KERNEL)
	OutP->clientSendPort.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	RetCode = CMIODPASampleConnect(In0P->Head.msgh_request_port, In0P->client, &OutP->clientSendPort.name);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}

	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1984, "SampleConnect")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleDisconnect_t__defined)
#define __MIG_check__Request__SampleDisconnect_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleDisconnect_t(__attribute__((__unused__)) __Request__SampleDisconnect_t *In0P)
{

	typedef __Request__SampleDisconnect_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleDisconnect_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleDisconnect */
mig_internal novalue _XSampleDisconnect
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleDisconnect_t __Request;
	typedef __Reply__SampleDisconnect_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleDisconnect_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleDisconnect_t__defined */

	__DeclareRcvRpc(1985, "SampleDisconnect")
	__BeforeRcvRpc(1985, "SampleDisconnect")

#if	defined(__MIG_check__Request__SampleDisconnect_t__defined)
	check_result = __MIG_check__Request__SampleDisconnect_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleDisconnect_t__defined) */

	OutP->RetCode = CMIODPASampleDisconnect(In0P->Head.msgh_request_port);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1985, "SampleDisconnect")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleGetDeviceStates_t__defined)
#define __MIG_check__Request__SampleGetDeviceStates_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleGetDeviceStates_t(__attribute__((__unused__)) __Request__SampleGetDeviceStates_t *In0P)
{

	typedef __Request__SampleGetDeviceStates_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->messagePort.type != MACH_MSG_PORT_DESCRIPTOR ||
	    In0P->messagePort.disposition != 18)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleGetDeviceStates_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleGetDeviceStates */
mig_internal novalue _XSampleGetDeviceStates
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t messagePort;
		/* end of the kernel processed data */
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleGetDeviceStates_t __Request;
	typedef __Reply__SampleGetDeviceStates_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleGetDeviceStates_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleGetDeviceStates_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t statesTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1986, "SampleGetDeviceStates")
	__BeforeRcvRpc(1986, "SampleGetDeviceStates")

#if	defined(__MIG_check__Request__SampleGetDeviceStates_t__defined)
	check_result = __MIG_check__Request__SampleGetDeviceStates_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleGetDeviceStates_t__defined) */

#if	UseStaticTemplates
	OutP->states = statesTemplate;
#else	/* UseStaticTemplates */
	OutP->states.deallocate =  TRUE;
	OutP->states.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->states.pad1 = 0;
	OutP->states.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->states.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->statesCnt = 0;

	RetCode = CMIODPASampleGetDeviceStates(In0P->Head.msgh_request_port, In0P->messagePort.name, (CMIO::DPA::Sample::DeviceStatePtr *)&(OutP->states.address), &OutP->statesCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->states.size = OutP->statesCnt * 520;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1986, "SampleGetDeviceStates")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleGetProperties_t__defined)
#define __MIG_check__Request__SampleGetProperties_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleGetProperties_t(__attribute__((__unused__)) __Request__SampleGetProperties_t *In0P)
{

	typedef __Request__SampleGetProperties_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->messagePort.type != MACH_MSG_PORT_DESCRIPTOR ||
	    In0P->messagePort.disposition != 18)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleGetProperties_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleGetProperties */
mig_internal novalue _XSampleGetProperties
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t messagePort;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint64_t guid;
		uint64_t time;
		CMIOObjectPropertyAddress matchAddress;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleGetProperties_t __Request;
	typedef __Reply__SampleGetProperties_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleGetProperties_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleGetProperties_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t addressesTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1987, "SampleGetProperties")
	__BeforeRcvRpc(1987, "SampleGetProperties")

#if	defined(__MIG_check__Request__SampleGetProperties_t__defined)
	check_result = __MIG_check__Request__SampleGetProperties_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleGetProperties_t__defined) */

#if	UseStaticTemplates
	OutP->addresses = addressesTemplate;
#else	/* UseStaticTemplates */
	OutP->addresses.deallocate =  TRUE;
	OutP->addresses.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->addresses.pad1 = 0;
	OutP->addresses.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->addresses.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->addressesCnt = 0;

	RetCode = CMIODPASampleGetProperties(In0P->Head.msgh_request_port, In0P->guid, In0P->messagePort.name, In0P->time, In0P->matchAddress, (CMIO::PropertyAddressPtr *)&(OutP->addresses.address), &OutP->addressesCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->addresses.size = OutP->addressesCnt * 12;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1987, "SampleGetProperties")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleSetPropertyState_t__defined)
#define __MIG_check__Request__SampleSetPropertyState_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleSetPropertyState_t(__attribute__((__unused__)) __Request__SampleSetPropertyState_t *In0P)
{

	typedef __Request__SampleSetPropertyState_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 2) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->qualifier.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->data.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->qualifier.size != In0P->qualifierCnt)
		return MIG_TYPE_ERROR;
	if (In0P->data.size != In0P->dataCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleSetPropertyState_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleSetPropertyState */
mig_internal novalue _XSampleSetPropertyState
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t qualifier;
		mach_msg_ool_descriptor_t data;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint64_t guid;
		UInt32 sendChangedNotifications;
		CMIOObjectPropertyAddress address;
		mach_msg_type_number_t qualifierCnt;
		mach_msg_type_number_t dataCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleSetPropertyState_t __Request;
	typedef __Reply__SampleSetPropertyState_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleSetPropertyState_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleSetPropertyState_t__defined */

	__DeclareRcvRpc(1988, "SampleSetPropertyState")
	__BeforeRcvRpc(1988, "SampleSetPropertyState")

#if	defined(__MIG_check__Request__SampleSetPropertyState_t__defined)
	check_result = __MIG_check__Request__SampleSetPropertyState_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleSetPropertyState_t__defined) */

	OutP->RetCode = CMIODPASampleSetPropertyState(In0P->Head.msgh_request_port, In0P->guid, In0P->sendChangedNotifications, In0P->address, (BytePtr)(In0P->qualifier.address), In0P->qualifier.size, (BytePtr)(In0P->data.address), In0P->data.size);
	mig_deallocate((vm_offset_t) In0P->data.address, In0P->data.size);
	In0P->data.address = (void *) 0;
	In0P->data.size = (mach_msg_size_t) 0;
	mig_deallocate((vm_offset_t) In0P->qualifier.address, In0P->qualifier.size);
	In0P->qualifier.address = (void *) 0;
	In0P->qualifier.size = (mach_msg_size_t) 0;

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1988, "SampleSetPropertyState")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleGetPropertyState_t__defined)
#define __MIG_check__Request__SampleGetPropertyState_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleGetPropertyState_t(__attribute__((__unused__)) __Request__SampleGetPropertyState_t *In0P)
{

	typedef __Request__SampleGetPropertyState_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->qualifier.type != MACH_MSG_OOL_DESCRIPTOR)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

#if __MigTypeCheck
	if (In0P->qualifier.size != In0P->qualifierCnt)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleGetPropertyState_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleGetPropertyState */
mig_internal novalue _XSampleGetPropertyState
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_ool_descriptor_t qualifier;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyAddress address;
		mach_msg_type_number_t qualifierCnt;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleGetPropertyState_t __Request;
	typedef __Reply__SampleGetPropertyState_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleGetPropertyState_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleGetPropertyState_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t dataTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1989, "SampleGetPropertyState")
	__BeforeRcvRpc(1989, "SampleGetPropertyState")

#if	defined(__MIG_check__Request__SampleGetPropertyState_t__defined)
	check_result = __MIG_check__Request__SampleGetPropertyState_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleGetPropertyState_t__defined) */

#if	UseStaticTemplates
	OutP->data = dataTemplate;
#else	/* UseStaticTemplates */
	OutP->data.deallocate =  TRUE;
	OutP->data.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->data.pad1 = 0;
	OutP->data.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->data.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->dataCnt = 0;

	RetCode = CMIODPASampleGetPropertyState(In0P->Head.msgh_request_port, In0P->guid, In0P->address, (BytePtr)(In0P->qualifier.address), In0P->qualifier.size, (BytePtr *)&(OutP->data.address), &OutP->dataCnt);
	mig_deallocate((vm_offset_t) In0P->qualifier.address, In0P->qualifier.size);
	In0P->qualifier.address = (void *) 0;
	In0P->qualifier.size = (mach_msg_size_t) 0;
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->data.size = OutP->dataCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1989, "SampleGetPropertyState")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleGetControls_t__defined)
#define __MIG_check__Request__SampleGetControls_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleGetControls_t(__attribute__((__unused__)) __Request__SampleGetControls_t *In0P)
{

	typedef __Request__SampleGetControls_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->messagePort.type != MACH_MSG_PORT_DESCRIPTOR ||
	    In0P->messagePort.disposition != 18)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleGetControls_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleGetControls */
mig_internal novalue _XSampleGetControls
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t messagePort;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint64_t guid;
		uint64_t time;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleGetControls_t __Request;
	typedef __Reply__SampleGetControls_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleGetControls_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleGetControls_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t controlChangesTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1990, "SampleGetControls")
	__BeforeRcvRpc(1990, "SampleGetControls")

#if	defined(__MIG_check__Request__SampleGetControls_t__defined)
	check_result = __MIG_check__Request__SampleGetControls_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleGetControls_t__defined) */

#if	UseStaticTemplates
	OutP->controlChanges = controlChangesTemplate;
#else	/* UseStaticTemplates */
	OutP->controlChanges.deallocate =  TRUE;
	OutP->controlChanges.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->controlChanges.pad1 = 0;
	OutP->controlChanges.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->controlChanges.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->controlChangesCnt = 0;

	RetCode = CMIODPASampleGetControls(In0P->Head.msgh_request_port, In0P->guid, In0P->messagePort.name, In0P->time, (CMIO::DPA::Sample::ControlChangesPtr *)&(OutP->controlChanges.address), &OutP->controlChangesCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->controlChanges.size = OutP->controlChangesCnt * 12;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1990, "SampleGetControls")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleSetControl_t__defined)
#define __MIG_check__Request__SampleSetControl_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleSetControl_t(__attribute__((__unused__)) __Request__SampleSetControl_t *In0P)
{

	typedef __Request__SampleSetControl_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleSetControl_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleSetControl */
mig_internal novalue _XSampleSetControl
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		UInt32 controlID;
		UInt32 value;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleSetControl_t __Request;
	typedef __Reply__SampleSetControl_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleSetControl_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleSetControl_t__defined */

	__DeclareRcvRpc(1991, "SampleSetControl")
	__BeforeRcvRpc(1991, "SampleSetControl")

#if	defined(__MIG_check__Request__SampleSetControl_t__defined)
	check_result = __MIG_check__Request__SampleSetControl_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleSetControl_t__defined) */

	OutP->RetCode = CMIODPASampleSetControl(In0P->Head.msgh_request_port, In0P->guid, In0P->controlID, In0P->value, &OutP->newValue);
	if (OutP->RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, OutP->RetCode);
	}

	OutP->NDR = NDR_record;


	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	__AfterRcvRpc(1991, "SampleSetControl")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleProcessRS422Command_t__defined)
#define __MIG_check__Request__SampleProcessRS422Command_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleProcessRS422Command_t(__attribute__((__unused__)) __Request__SampleProcessRS422Command_t *In0P, __attribute__((__unused__)) __Request__SampleProcessRS422Command_t **In1PP)
{

	typedef __Request__SampleProcessRS422Command_t __Request;
	__Request *In1P;
#if	__MigTypeCheck
	unsigned int msgh_size;
#endif	/* __MigTypeCheck */
	unsigned int msgh_size_delta;

#if	__MigTypeCheck
	msgh_size = In0P->Head.msgh_size;
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (msgh_size < (mach_msg_size_t)(sizeof(__Request) - 512)) ||  (msgh_size > (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if defined(__NDR_convert__int_rep__Request__SampleProcessRS422Command_t__commandCnt__defined)
	if (In0P->NDR.int_rep != NDR_record.int_rep)
		__NDR_convert__int_rep__Request__SampleProcessRS422Command_t__commandCnt(&In0P->commandCnt, In0P->NDR.int_rep);
#endif	/* __NDR_convert__int_rep__Request__SampleProcessRS422Command_t__commandCnt__defined */
	msgh_size_delta = _WALIGN_(In0P->commandCnt);
#if	__MigTypeCheck
	if ( In0P->commandCnt > 512 )
		return MIG_BAD_ARGUMENTS;
	if (((msgh_size - (mach_msg_size_t)(sizeof(__Request) - 512)) < In0P->commandCnt) ||
	    (msgh_size != (mach_msg_size_t)(sizeof(__Request) - 512) + _WALIGN_(In0P->commandCnt)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	*In1PP = In1P = (__Request *) ((pointer_t) In0P + msgh_size_delta - 512);

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleProcessRS422Command_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleProcessRS422Command */
mig_internal novalue _XSampleProcessRS422Command
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		mach_msg_type_number_t commandCnt;
		UInt8 command[512];
		UInt32 responseLength;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleProcessRS422Command_t __Request;
	typedef __Reply__SampleProcessRS422Command_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Request *In1P;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleProcessRS422Command_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleProcessRS422Command_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t responseTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1992, "SampleProcessRS422Command")
	__BeforeRcvRpc(1992, "SampleProcessRS422Command")

#if	defined(__MIG_check__Request__SampleProcessRS422Command_t__defined)
	check_result = __MIG_check__Request__SampleProcessRS422Command_t((__Request *)In0P, (__Request **)&In1P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleProcessRS422Command_t__defined) */

#if	UseStaticTemplates
	OutP->response = responseTemplate;
#else	/* UseStaticTemplates */
	OutP->response.deallocate =  TRUE;
	OutP->response.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->response.pad1 = 0;
	OutP->response.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->response.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->responseCnt = 0;

	RetCode = CMIODPASampleProcessRS422Command(In0P->Head.msgh_request_port, In0P->guid, In0P->command, In0P->commandCnt, In1P->responseLength, &OutP->responseUsed, (BytePtr *)&(OutP->response.address), &OutP->responseCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->response.size = OutP->responseCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1992, "SampleProcessRS422Command")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleStartStream_t__defined)
#define __MIG_check__Request__SampleStartStream_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleStartStream_t(__attribute__((__unused__)) __Request__SampleStartStream_t *In0P)
{

	typedef __Request__SampleStartStream_t __Request;
#if	__MigTypeCheck
	if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->msgh_body.msgh_descriptor_count != 1) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

#if	__MigTypeCheck
	if (In0P->messagePort.type != MACH_MSG_PORT_DESCRIPTOR ||
	    In0P->messagePort.disposition != 17)
		return MIG_TYPE_ERROR;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleStartStream_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleStartStream */
mig_internal novalue _XSampleStartStream
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		/* start of the kernel processed data */
		mach_msg_body_t msgh_body;
		mach_msg_port_descriptor_t messagePort;
		/* end of the kernel processed data */
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleStartStream_t __Request;
	typedef __Reply__SampleStartStream_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleStartStream_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleStartStream_t__defined */

	__DeclareRcvRpc(1993, "SampleStartStream")
	__BeforeRcvRpc(1993, "SampleStartStream")

#if	defined(__MIG_check__Request__SampleStartStream_t__defined)
	check_result = __MIG_check__Request__SampleStartStream_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleStartStream_t__defined) */

	OutP->RetCode = CMIODPASampleStartStream(In0P->Head.msgh_request_port, In0P->guid, In0P->messagePort.name, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1993, "SampleStartStream")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleStopStream_t__defined)
#define __MIG_check__Request__SampleStopStream_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleStopStream_t(__attribute__((__unused__)) __Request__SampleStopStream_t *In0P)
{

	typedef __Request__SampleStopStream_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleStopStream_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleStopStream */
mig_internal novalue _XSampleStopStream
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleStopStream_t __Request;
	typedef __Reply__SampleStopStream_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleStopStream_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleStopStream_t__defined */

	__DeclareRcvRpc(1994, "SampleStopStream")
	__BeforeRcvRpc(1994, "SampleStopStream")

#if	defined(__MIG_check__Request__SampleStopStream_t__defined)
	check_result = __MIG_check__Request__SampleStopStream_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleStopStream_t__defined) */

	OutP->RetCode = CMIODPASampleStopStream(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1994, "SampleStopStream")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleGetControlList_t__defined)
#define __MIG_check__Request__SampleGetControlList_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleGetControlList_t(__attribute__((__unused__)) __Request__SampleGetControlList_t *In0P)
{

	typedef __Request__SampleGetControlList_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleGetControlList_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleGetControlList */
mig_internal novalue _XSampleGetControlList
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleGetControlList_t __Request;
	typedef __Reply__SampleGetControlList_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleGetControlList_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleGetControlList_t__defined */

#if	UseStaticTemplates
	const static mach_msg_ool_descriptor_t dataTemplate = {
		/* addr = */		(void *)0,
		/* size = */		0,
		/* deal = */		TRUE,
		/* copy = */		MACH_MSG_VIRTUAL_COPY,
		/* pad2 = */		0,
		/* type = */		MACH_MSG_OOL_DESCRIPTOR,
	};
#endif	/* UseStaticTemplates */

	kern_return_t RetCode;
	__DeclareRcvRpc(1995, "SampleGetControlList")
	__BeforeRcvRpc(1995, "SampleGetControlList")

#if	defined(__MIG_check__Request__SampleGetControlList_t__defined)
	check_result = __MIG_check__Request__SampleGetControlList_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleGetControlList_t__defined) */

#if	UseStaticTemplates
	OutP->data = dataTemplate;
#else	/* UseStaticTemplates */
	OutP->data.deallocate =  TRUE;
	OutP->data.copy = MACH_MSG_VIRTUAL_COPY;
	OutP->data.pad1 = 0;
	OutP->data.type = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
	OutP->data.pad_end = 0;
#endif
#endif	/* UseStaticTemplates */


	OutP->dataCnt = 0;

	RetCode = CMIODPASampleGetControlList(In0P->Head.msgh_request_port, In0P->guid, (BytePtr *)&(OutP->data.address), &OutP->dataCnt);
	if (RetCode != KERN_SUCCESS) {
		MIG_RETURN_ERROR(OutP, RetCode);
	}
	OutP->data.size = OutP->dataCnt;


	OutP->NDR = NDR_record;


	OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
	OutP->Head.msgh_size = (mach_msg_size_t)(sizeof(Reply));
	OutP->msgh_body.msgh_descriptor_count = 1;
	__AfterRcvRpc(1995, "SampleGetControlList")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleStartDeckThreads_t__defined)
#define __MIG_check__Request__SampleStartDeckThreads_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleStartDeckThreads_t(__attribute__((__unused__)) __Request__SampleStartDeckThreads_t *In0P)
{

	typedef __Request__SampleStartDeckThreads_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleStartDeckThreads_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleStartDeckThreads */
mig_internal novalue _XSampleStartDeckThreads
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleStartDeckThreads_t __Request;
	typedef __Reply__SampleStartDeckThreads_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleStartDeckThreads_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleStartDeckThreads_t__defined */

	__DeclareRcvRpc(1996, "SampleStartDeckThreads")
	__BeforeRcvRpc(1996, "SampleStartDeckThreads")

#if	defined(__MIG_check__Request__SampleStartDeckThreads_t__defined)
	check_result = __MIG_check__Request__SampleStartDeckThreads_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleStartDeckThreads_t__defined) */

	OutP->RetCode = CMIODPASampleStartDeckThreads(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1996, "SampleStartDeckThreads")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleStopDeckThreads_t__defined)
#define __MIG_check__Request__SampleStopDeckThreads_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleStopDeckThreads_t(__attribute__((__unused__)) __Request__SampleStopDeckThreads_t *In0P)
{

	typedef __Request__SampleStopDeckThreads_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleStopDeckThreads_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleStopDeckThreads */
mig_internal novalue _XSampleStopDeckThreads
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleStopDeckThreads_t __Request;
	typedef __Reply__SampleStopDeckThreads_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleStopDeckThreads_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleStopDeckThreads_t__defined */

	__DeclareRcvRpc(1997, "SampleStopDeckThreads")
	__BeforeRcvRpc(1997, "SampleStopDeckThreads")

#if	defined(__MIG_check__Request__SampleStopDeckThreads_t__defined)
	check_result = __MIG_check__Request__SampleStopDeckThreads_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleStopDeckThreads_t__defined) */

	OutP->RetCode = CMIODPASampleStopDeckThreads(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1997, "SampleStopDeckThreads")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleDeckPlay_t__defined)
#define __MIG_check__Request__SampleDeckPlay_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleDeckPlay_t(__attribute__((__unused__)) __Request__SampleDeckPlay_t *In0P)
{

	typedef __Request__SampleDeckPlay_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleDeckPlay_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleDeckPlay */
mig_internal novalue _XSampleDeckPlay
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleDeckPlay_t __Request;
	typedef __Reply__SampleDeckPlay_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleDeckPlay_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleDeckPlay_t__defined */

	__DeclareRcvRpc(1998, "SampleDeckPlay")
	__BeforeRcvRpc(1998, "SampleDeckPlay")

#if	defined(__MIG_check__Request__SampleDeckPlay_t__defined)
	check_result = __MIG_check__Request__SampleDeckPlay_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleDeckPlay_t__defined) */

	OutP->RetCode = CMIODPASampleDeckPlay(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1998, "SampleDeckPlay")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleDeckStop_t__defined)
#define __MIG_check__Request__SampleDeckStop_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleDeckStop_t(__attribute__((__unused__)) __Request__SampleDeckStop_t *In0P)
{

	typedef __Request__SampleDeckStop_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleDeckStop_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleDeckStop */
mig_internal novalue _XSampleDeckStop
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleDeckStop_t __Request;
	typedef __Reply__SampleDeckStop_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleDeckStop_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleDeckStop_t__defined */

	__DeclareRcvRpc(1999, "SampleDeckStop")
	__BeforeRcvRpc(1999, "SampleDeckStop")

#if	defined(__MIG_check__Request__SampleDeckStop_t__defined)
	check_result = __MIG_check__Request__SampleDeckStop_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleDeckStop_t__defined) */

	OutP->RetCode = CMIODPASampleDeckStop(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(1999, "SampleDeckStop")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleDeckJog_t__defined)
#define __MIG_check__Request__SampleDeckJog_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleDeckJog_t(__attribute__((__unused__)) __Request__SampleDeckJog_t *In0P)
{

	typedef __Request__SampleDeckJog_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleDeckJog_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleDeckJog */
mig_internal novalue _XSampleDeckJog
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		SInt32 speed;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleDeckJog_t __Request;
	typedef __Reply__SampleDeckJog_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleDeckJog_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleDeckJog_t__defined */

	__DeclareRcvRpc(2000, "SampleDeckJog")
	__BeforeRcvRpc(2000, "SampleDeckJog")

#if	defined(__MIG_check__Request__SampleDeckJog_t__defined)
	check_result = __MIG_check__Request__SampleDeckJog_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleDeckJog_t__defined) */

	OutP->RetCode = CMIODPASampleDeckJog(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element, In0P->speed);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(2000, "SampleDeckJog")
}

#if ( __MigTypeCheck )
#if __MIG_check__Request__SampleAssistant_subsystem__
#if !defined(__MIG_check__Request__SampleDeckCueTo_t__defined)
#define __MIG_check__Request__SampleDeckCueTo_t__defined

mig_internal kern_return_t __MIG_check__Request__SampleDeckCueTo_t(__attribute__((__unused__)) __Request__SampleDeckCueTo_t *In0P)
{

	typedef __Request__SampleDeckCueTo_t __Request;
#if	__MigTypeCheck
	if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
	    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
		return MIG_BAD_ARGUMENTS;
#endif	/* __MigTypeCheck */

	return MACH_MSG_SUCCESS;
}
#endif /* !defined(__MIG_check__Request__SampleDeckCueTo_t__defined) */
#endif /* __MIG_check__Request__SampleAssistant_subsystem__ */
#endif /* ( __MigTypeCheck ) */


/* Routine SampleDeckCueTo */
mig_internal novalue _XSampleDeckCueTo
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{

#ifdef  __MigPackStructs
#pragma pack(push, 4)
#endif
	typedef struct {
		mach_msg_header_t Head;
		NDR_record_t NDR;
		uint64_t guid;
		CMIOObjectPropertyScope scope;
		CMIOObjectPropertyElement element;
		Float64 requestedTimecode;
		UInt32 playOnCue;
		mach_msg_trailer_t trailer;
	} Request __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
	typedef __Request__SampleDeckCueTo_t __Request;
	typedef __Reply__SampleDeckCueTo_t Reply __attribute__((unused));

	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	Request *In0P = (Request *) InHeadP;
	Reply *OutP = (Reply *) OutHeadP;
#ifdef	__MIG_check__Request__SampleDeckCueTo_t__defined
	kern_return_t check_result;
#endif	/* __MIG_check__Request__SampleDeckCueTo_t__defined */

	__DeclareRcvRpc(2001, "SampleDeckCueTo")
	__BeforeRcvRpc(2001, "SampleDeckCueTo")

#if	defined(__MIG_check__Request__SampleDeckCueTo_t__defined)
	check_result = __MIG_check__Request__SampleDeckCueTo_t((__Request *)In0P);
	if (check_result != MACH_MSG_SUCCESS)
		{ MIG_RETURN_ERROR(OutP, check_result); }
#endif	/* defined(__MIG_check__Request__SampleDeckCueTo_t__defined) */

	OutP->RetCode = CMIODPASampleDeckCueTo(In0P->Head.msgh_request_port, In0P->guid, In0P->scope, In0P->element, In0P->requestedTimecode, In0P->playOnCue);

	OutP->NDR = NDR_record;


	__AfterRcvRpc(2001, "SampleDeckCueTo")
}



/* Description of this subsystem, for use in direct RPC */
const struct CMIODPASampleAssistant_subsystem CMIODPASampleAssistant_subsystem = {
	CMIODPASampleServer_routine,
	1984,
	2002,
	(mach_msg_size_t)sizeof(union __ReplyUnion__CMIODPASampleAssistant_subsystem),
	(vm_address_t)0,
	{
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleConnect, 3, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleConnect_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleDisconnect, 1, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleDisconnect_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleGetDeviceStates, 4, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleGetDeviceStates_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleGetProperties, 11, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleGetProperties_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleSetPropertyState, 11, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleSetPropertyState_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleGetPropertyState, 10, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleGetPropertyState_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleGetControls, 8, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleGetControls_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleSetControl, 6, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleSetControl_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleProcessRS422Command, 9, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleProcessRS422Command_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleStartStream, 6, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleStartStream_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleStopStream, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleStopStream_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleGetControlList, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleGetControlList_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleStartDeckThreads, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleStartDeckThreads_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleStopDeckThreads, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleStopDeckThreads_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleDeckPlay, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleDeckPlay_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleDeckStop, 5, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleDeckStop_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleDeckJog, 6, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleDeckJog_t)},
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) _XSampleDeckCueTo, 8, 0, (routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__SampleDeckCueTo_t)},
	}
};

mig_external boolean_t CMIODPASampleServer
	(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
{
	/*
	 * typedef struct {
	 * 	mach_msg_header_t Head;
	 * 	NDR_record_t NDR;
	 * 	kern_return_t RetCode;
	 * } mig_reply_error_t;
	 */

	mig_routine_t routine;

	OutHeadP->msgh_bits = MACH_MSGH_BITS(MACH_MSGH_BITS_REPLY(InHeadP->msgh_bits), 0);
	OutHeadP->msgh_remote_port = InHeadP->msgh_reply_port;
	/* Minimal size: routine() will update it if different */
	OutHeadP->msgh_size = (mach_msg_size_t)sizeof(mig_reply_error_t);
	OutHeadP->msgh_local_port = MACH_PORT_NULL;
	OutHeadP->msgh_id = InHeadP->msgh_id + 100;
	OutHeadP->msgh_reserved = 0;

	if ((InHeadP->msgh_id > 2001) || (InHeadP->msgh_id < 1984) ||
	    ((routine = CMIODPASampleAssistant_subsystem.routine[InHeadP->msgh_id - 1984].stub_routine) == 0)) {
		((mig_reply_error_t *)OutHeadP)->NDR = NDR_record;
		((mig_reply_error_t *)OutHeadP)->RetCode = MIG_BAD_ID;
		return FALSE;
	}
	(*routine) (InHeadP, OutHeadP);
	return TRUE;
}

mig_external mig_routine_t CMIODPASampleServer_routine
	(mach_msg_header_t *InHeadP)
{
	int msgh_id;

	msgh_id = InHeadP->msgh_id - 1984;

	if ((msgh_id > 17) || (msgh_id < 0))
		return 0;

	return CMIODPASampleAssistant_subsystem.routine[msgh_id].stub_routine;
}
